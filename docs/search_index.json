[["index.html", "edgyR: NVIDIAⓇ Jetson™ Tools for R Developers Chapter 1 Introduction 1.1 Overview 1.2 Licensing 1.3 Installers 1.4 How is it pronounced?", " edgyR: NVIDIAⓇ Jetson™ Tools for R Developers M. Edward (Ed) Borasky 2021-01-30 Chapter 1 Introduction 1.1 Overview “And though she be but little, she is fierce.” – Shakespeare, on receiving an NVIDIA Jetson Nano for his birthday The goal of the edgyR project is to give R deveopers access to NVIDIA Jetson development kits. Although the target market of the Jetson platform is autonomous vehicles, and the focus of the NVIDIA software is image and video processing, the hardware and software are general enough for a wide variety of scientific computing applications. The initial release is aimed at R package developers. I’m assuming a knowledge of R, RStudio, Git, and R Markdown. The release contains everything an R package developer should need to develop packages that interface with the unique hardware of the Jetson platform. It also contains a JupyterLab server and Python data science stack, for Python users more familiar with that environment. The Jetson hardware consists of a multi-core arm64 CPU and a CUDA-compatible GPU. The smallest of the family, the 2 GB Jetson Nano, has four CPU cores, 2 GB of RAM, and an NVIDIA Maxwell GPU with 128 CUDA cores. The peak speed is 472 billion floating point operations per second (GFLOPS). The largest, the Jetson AGX Xavier, has eight CPU cores, 32 GB of RAM, and a Volta GPU with 64 tensor cores and 512 CUDA cores. The peak speed of the AGX Xavier is 32 trillion operations per second. The Jetson software is called JetPack. JetPack includes Linux for Tegra (L4T), a full Ubuntu 18.04 LTS “Bionic Beaver” desktop, NVIDIA drivers, compilers, linkers and libraries to access the onboard GPU in C/C++ and Python, and a complete NVIDIA Docker runtime. edgyR adds An administrative user account edgyr with Linux sudo privileges. This account requires a password to log into RStudio Server, but can execute commands with sudo without re-entering the password. R 4.0.3 compiled from upstream source, RStudioⓇ Server 1.4.1103 compiled from upstream source, R package development tools: devtools, tidyverse, rmarkdown, bookdown and pkgdown, shinyⓇ, reticulate Python interface, odbc database connectivity. the Miniforge conda-forge distribution, an optimized Python data science stack: JupyterLab the cupy CUDA-optimized version of numpy, the cuSignal CUDA-optimized digital signal processing library. edgyR is distributed via Docker image at edgyr. The image is based on NVIDIA L4T Base. 1.2 Licensing Like RStudio Server, edgyR is licensed via the GNU Affero General Public License. The source resides on GitHub at https://github.com/edgyR/edgyR-containers. The book you’re reading is also open source and resides at https://github.com/edgyR/edgyR.github.io. RStudioⓇ and ShinyⓇ are trademarks of RStudio PBC. NVIDIAⓇ and Jetson™ are trademarks of NVIDIA Inc. 1.3 Installers Once you run the edgyr Docker image and sign in to RStudio, you can install additional software on the image using the shell scripts in the Installers directory. As of release 0.7.5, these are audio.sh: installs the ChucK and CSound audio synthesis languages and R packages for audio analysis and synthesis (Sueur 2018). authoring.sh: installs additional packages for R Markdown authoring. bayes.sh: installs the packages used in (McElreath 2020). julia.sh: installs the Julia language globally and CUDA.jl for the edgyr user. test-julia.sh: tests a Julia install. This takes a long time. pocl.sh: Portable Computing Language. This implements OpenCL version 1.2 and includes a CUDA backend. pyarrow-cuda-git.sh: Creates a conda environment with Apache Arrow C++ libraries and the PyArrow Python bindings. The CUDA options are supported, and the R arrow package is installed in the edgyr user R library. pytorch-1.7.sh: Creates a virtualenv environment with the NVIDIA CUDA version of PyTorch 1.7, and installs rTorch in the edgyr user R library. spatial.sh:installs R packages for geospatial data science. Most of them are documented in Geocomputation with R (Lovelace, Nowosad, and Muenchow 2019). tensorflow-1.sh: Creates a virtualenv environment with the NVIDIA CUDA version of TensorFlow 1.15, and installs keras in the edgyr user R library. tensorflow-2.sh: : Creates a virtualenv environment with the NVIDIA CUDA version of TensorFlow 2.3, and installs keras in the edgyr user R library. 1.4 How is it pronounced? There are (at least) five options: ED-grrr ED-gyre EDGE-er Edgier Edgy R It is not pronounced like any brand of peanut butter. Otherwise, it’s your choice! edgyR: NVIDIAⓇ Jetson™ Tools for R Developers by M. Edward (Ed) Borasky is licensed under CC BY-SA 4.0 "],["setting-up-the-jetson-nano.html", "Chapter 2 Setting up the Jetson Nano 2.1 What to buy 2.2 Flashing and initialization 2.3 Setup and first boot 2.4 References", " Chapter 2 Setting up the Jetson Nano 2.1 What to buy A Jetson Nano: You can buy kits with power supplies, enclosures and such, and even robot kits with a Nano. Or you can just buy a Nano directly, which is what I did. If you want to go that route, start here:1 Networking: The Nano has an Ethernet jack, so if you have wired internet you’ll just need a cable. If you want wireless, the USB adapter in the “Prepare for Setup” tab of2 is fine. Power supply: There are two ways to power the Nano, micro USB port or barrel jack. I highly recommend the barrel jack option. See,3 “Other Power Supply Options,” for the details. If you’re going with a kit, check the power supply that comes with it before you order. Make sure it’s a barrel jack model, not a micro USB one. The barrel jack option requires a jumper on the board to work. It’s a little tricky to find. It’s on the top of the board between 8 and 9 in the diagram. microSD card: The 16 GB minimum specified is not enough! The operating system after flashing takes up 12 GB, which leaves you only 4 GB. I recommend at least 128 GB and I’m currently running on a 256 GB one. The microSD slot is also tricky to find. The diagram shows it “somewhere on the back,” where “front” is defined as the edge with the USB ports and the power barrel jack. You’ll have to pick up the Nano (unplugged, of course) by the heat sink and look closely in a bright light to find it. It’s on the board just under the heat sink about a third of the way from the edge with the power barrel jack. Insert the card with the contact end first and the contacts facing the board. Display: any HDMI or DisplayPort display will work. I have two; a 23-inch Dell monitor and one of those little 7\" touch-sensitive ones that people use with Raspberry Pi kits. The Nano has a full Ubuntu 18.04 LTS “Bionic Beaver” desktop, so I don’t recommend the small ones. But you can also access the Nano via SSH or VNC remotely, and the small display is fine for setting things up. Mouse and keyboard: Most of the USB wireless mice and keyboards work, as do the wired ones. I like keyboard / trackpad and keyboard / trackball combos with a single USB wireless plug; the one I have is a Logitech K400+. Make sure you get one that’s wireless and not Bluetooth; the Nano doesn’t have Bluetooth. 2.2 Flashing and initialization The instructions in the “Write Image to the microSD Card” tab of4 work well. Balena Etcher works on Linux, Mac and Windows; I’ve used it from both Windows and Linux. 2.3 Setup and first boot The instructions in the “Setup and First Boot” tab of5 are fine. I would advise reading the licensing part carefully. The NVIDIA offerings are a mix of proprietary and open source with various licenses, and if you have plans beyond just enjoying and exploring, I’d recommend engaging an attorney. If you have a wired internet connection, the setup process will find it and configure it automatically. If you have a wireless adapter, the setup process will find it and give you a dialog to connect to the wireless. It will also set up your keyboard and time zone and let you define a user name, user ID, computer name and password. The usual warnings about passwords apply here. The last step in the setup process is expanding the microSD card capacity. When you flashed the card, the flash program copied a binary image onto the first part of the card, leaving the rest unused. The binary image is about 12 gigabytes. That means if you have a 256 GB micro SD card, about 244 GB of it would be unused. This step grows the 12 GB existing filesystem into the entire card. Just accept the default size and press “Continue.” One final recommendation: if you want to do things with the Jetson hardware, I highly recommend JetsonHacks.6 2.4 References “Jetson Nano Developer Kit” (2019)↩︎ “Getting Started with Jetson Nano Developer Kit” (2019)↩︎ Zensius (2019)↩︎ “Getting Started with Jetson Nano Developer Kit” (2019)↩︎ “Getting Started with Jetson Nano Developer Kit” (2019)↩︎ “JetsonHacks” (2020)↩︎ "],["linux-for-tegra-l4t-first-steps.html", "Chapter 3 Linux for Tegra (L4T) First Steps 3.1 What is L4T? 3.2 Updating the operating system 3.3 Remote access 3.4 Unminimize, man, sudo and all that 3.5 Remote desktop 3.6 Booting to a Linux console 3.7 References", " Chapter 3 Linux for Tegra (L4T) First Steps 3.1 What is L4T? I’m going to assume you have a Jetson Nano and have completed vignette(\"aa-setting-up-the-jetson-nano\") and are at the Jetson desktop as shown in “After Logging In” on the “Setup and First Boot” tab of.7 When you flashed the microSD card, the software you installed was a collection of NVIDIA tools called JetPack SDK (“JetPack SDK” 2019). JetPack SDK is a mature collection of utilities for developing edge computing applications on Jetson hardware. If you have time and are interested in the state of the NVIDIA art, there are a wealth of tutorials and examples, most of which will run on the Nano. See8 to get started. The operating system component of JetPack SDK is called Linux for Tegra (L4T). L4T is built on top of Ubuntu Linux 18.04 LTS “Bionic Beaver” running on the 64-bit ARM hardware (arm64 or aarch64 if you’re into code names). If you’re familiar with Ubuntu Linux 18.04 LTS, most of this will be second nature. Ubuntu is a very popular Linux distro, so if you’re a Linux newcomer you probably know someone who can show you around. But I’ll show you what you need to do to get the edgyr-ml Docker image up and running. 3.2 Updating the operating system L4T is set up to periodically poll the internet for OS updates. If it finds that updates are available it will open an app and ask you if you want to install them. Unless you’re an expert you should install the updates and restart if required. Here’s what it looks like on a 7-inch 1024x600 screen: Press the button (the circle with the “A” in it at the lower left) and the Software Updater dialog will open: Press the “Install Now” button. When it’s finished, you’ll see: Press the “Restart Now” button. The system will restart and then you can log back in. 3.3 Remote access At this point, you’re all set up and can proceed to pulling the edgyR Docker image and running it in a container. But you’ll probably want to set up remote access, so you can open a terminal from another machine with Secure Shell (SSH) or share the Nano desktop via VNC. If you have a typical home local area network (LAN), you have a router somewhere connected to the internet and the router sets up a wireless LAN for you. The router may have wired jacks in it that you can connect to directly as well. In either case, the router assigned your Nano and every other device on your home LAN an Internet Protocol (IP) address. To find out what the IP address of the Nano is, open the dialog box in the upper right. For a wireless connection it will be a wireless symbol and for a wired connection like mine it will be two arrows. Then select the “Connection Information” entry. Towards the middle you’ll see IPv4 and then the IP address. So my Nano has the IP address 192.168.254.23 on my wireless router’s LAN. Can I SSH to it from an RStudio terminal? 3.4 Unminimize, man, sudo and all that As the message states, the system has been minimized to save space. What’s missing is mostly documentation, and most of that is man pages. man pages are one of the oldest parts of the Unix legacy; they were on the earliest text-only Unix systems as a way of providing documentation at the command line. This was before widespread internet usage, the World Wide Web, personal computers, Google, and Billie Eilish. You can still get man pages on Linux systems but there are both simpler and richer forms of documentation available, so they aren’t really necessary. If you want them, type sudo unminimize. And wait. This will take a long time; it is re-installing all the packages in L4T to get the bits that were not shipped on the flash image! And sudo? sudo stands for “superuser do,” so it’s pronounced “soo-doo.” But don’t be surprised if you hear it pronounced “pseudo.” sudo lets you run commands that normally require superuser privileges, like installing L4T packages and starting Docker containers. So we’ll be using sudo. When sudo asks for a password, it’s your password – the one you specified when you set up the system. 3.5 Remote desktop As noted above it is also possible to share the desktop. This is a bit tricky to set up, so I’ll simply show you where the instructions are and let you do it if you wish. On the dash at the lower left, there’s a button labeled L4T-README: Click once on it to open it up: Double-click on README-vnc.txt: 3.6 Booting to a Linux console If you’re planning to access the Nano mostly via remote SSH sessions and RStudio Server or JupyterLab web services inside an edgyR container, you won’t be using the full L4T desktop. The full L4T desktop takes up more RAM than a Linux console, and the Nano has only 4 GB of RAM. To set the Nano to boot to a Linux console, enter sudo systemctl set-default multi-user.target sudo systemctl reboot To set it back to a full desktop, enter sudo systemctl set-default graphical.target sudo systemctl reboot 3.7 References “Getting Started with Jetson Nano Developer Kit” (2019)↩︎ “Tutorials | NVIDIA Developer” (2019)↩︎ "],["running-an-edgyr-container.html", "Chapter 4 Running an edgyR Container 4.1 Getting the repository 4.2 Starting the edgyr container 4.3 Using the container 4.4 References", " Chapter 4 Running an edgyR Container 4.1 Getting the repository Open a terminal on the Jetson host machine. You can either do this from a terminal window at the host console or logged in remotely via secure shell (SSH). Create a Projects directory and clone this repository into it. mkdir --parents ~/Projects cd ~/Projects git clone https://github.com/znmeb/edgyR.git cd edgyR/container-run-scripts 4.2 Starting the edgyr container Download the image: ./pull-image. You will need to enter your Jetson password to run sudo. Define a new password for the edgyr account in the container. For security reasons, the container will exit if you do not do this. The new password must be at least 12 characters long. Set the new password in the environment variable EDGYR_PASSWORD. For example: export EDGYR_PASSWORD=\"12.angry%characters\" Start the container with ./run-edgyr. You may have to enter your Jetson password for sudo again. RStudio Server will start, listening on IP address 0.0.0.0 port 7878. You should see ./run-edgyr Force-removing old &#39;edgyr&#39; container You can ignore errors if it doesn&#39;t exist Error: No such container: edgyr Running image znmeb/edgyr-ml:latest fc04e5d9edbff7d2a7282d9680bd4db41009675ad1983d9e762e2c7144f2990c CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fc04e5d9edbf znmeb/edgyr-ml:latest &quot;/docker-entrypoint.…&quot; 6 seconds ago Up 5 seconds edgyr Resetting &#39;edgyr&#39; password Starting RStudio Server - browse to port 7878 on Docker host The long hexadecimal string and container ID will be different on your system, but the rest should look like what’s above. Note that port 7878 is not the default RStudio Server port! This script runs the edgyr container in detached mode. The processes in the container are running in the background, and you can use the terminal for other operations. 4.3 Using the container You can use the container two ways - you can either browse to the RStudio Server or log in to the command line from the terminal. Most users will want to use RStudio, so we’ll cover that first. 4.3.1 Browsing to the RStudio Server Browse to the server and log in. On the Jetson console, browse to localhost:7878. On a remote system, browse to port 7878 on the IP address of the Jetson host. Note that this is a different port number from the RStudio Server default port number! For example, my Jetson Nano has IP address 192.168.254.23, so I browse to http://192.168.254.23:7878. The user name is edgyr and the password is the one you defined when you ran the container in step 3 above – the value you set in the EDGYR_PASSWORD variable before you started the container. After you log in, you’ll see the RStudio Server web application page. 4.3.2 Exploring the container The RStudio Server web application page is the standard open source RStudio Server “desktop.” I find it useful to set the browser to full-screen mode when using it to minimize distractions. The Files pane shows some of the extras that are installed on the image and are available to you in the container. .Renviron and .Rprofile are the standard environment setting files; remember to restart your R session if you change them. already-installed contains the scripts that installed the R packages on the image; you don’t need to run them. bin is the directory where TinyTeX installed its executables. edit-me-then-run-4-git-config.bash is a script you can edit and run to set your git configuration. If you’re going to use git, you’ll need to edit and then run it. installers contains scripts you can run to install add-ons. Currently the only available add-on is TensorFlow 2. logfiles contains compressed log files from all the software installs; gunzip them if you want to look at them. Projects is an empty folder for you to store your projects. start-jupyter-lab starts a JupyterLab server; there is an entire vignette devoted to JupyterLab in vignette(\"kk-jupyter-lab\"). test-scripts has some scripts you can run and use as examples. 4.3.3 Logging in to the command line There are two scripts to log in to the command line of the container: login-as-edgyr and login-as-root. Neither one requires a password. Normally you’ll want to log in as the non-root user edgyr. When you do, it will look like this: $ ./login-as-edgyr To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;. See &quot;man sudo_root&quot; for details. edgyr@edgyr:~$ Note that you will need the edgyr password if you use sudo when logged in as edgyr. What can you do at the command line? Pretty much anything you can do with bash, Julia, Python and R from the command line on any Linux system. The functionality is identical to a Terminal pane in RStudio Server. 4.4 References "],["overview-of-software-on-the-image.html", "Chapter 5 Overview of Software on the Image 5.1 Software from the NVIDIA l4t-ml image 5.2 Added Linux packages 5.3 Julia 5.4 R and RStudio from source 5.5 The edgyr user 5.6 References", " Chapter 5 Overview of Software on the Image 5.1 Software from the NVIDIA l4t-ml image A Docker image is composed of layers. The first set of layers on edgyr-ml are the layers on the NVIDIA l4t-ml image.9 5.1.1 Operating system and command line The operating system on the image is Linux for Tegra (L4T).10 L4T is Ubuntu 18.04 LTS “Bionic Beaver” for the arm64 architecture, with added NVIDIA drivers, libraries, compilers and other development tools for the GPU on Jetson modules and development kits. A Jetson developer can use C/C++, Python or both with the software on an L4T system. The vim editor is standard, as is the git version control system. 5.1.2 Python data science / machine learning The base l4t-ml image contains a complete Python 3 data science / machine learning stack. edgyr adds the virtualenv environment manager, the SymPy computer algebra package and the tensorflow-probability probabilistic programming package. Package Version jupyterlab 2.1.5 jupyterlab-server 1.1.5 Keras-Applications 1.0.8 Keras-Preprocessing 1.0.5 matplotlib 2.1.1 numba 0.50.0 numpy 1.19.0 onnx 1.7.0 pandas 1.0.5 pycuda 2019.1.2 scikit-learn 0.23.1 scipy 1.5.0 sympy 1.6.1 tensorboard 1.15.0 tensorflow 1.15.2+nv20.6 tensorflow-estimator 1.15.1 tensorflow-probability 0.8.0 torch 1.6.0 torchaudio 0.6.0a0+d6f81d1 torchvision 0.7.0a0+6631b74 virtualenv 15.1.0 5.2 Added Linux packages edgyr-ml adds some Linux packages to the base: git-lfs (handles large files in repositories) lynx (command-line browser) openjdk-8-jdk-headless (Java 8 - required for RStudio Server) pandoc (R Markdown processing) pandoc-citeproc (R Markdown processing) python-virtualenv (Python virtual environment handling) python3-virtualenv (Python virtual environment handling) virtualenv (Python virtual environment handling) virtualenvwrapper (Python virtual environment handling) 5.3 Julia edgyr-ml includes Julia 1.5.011 installed from the Julia project download page. The IJulia Jupyter kernel12 and the CUDA.jl13 GPU interface package are also included. Note that at present there are no tests that the Jetson GPU is accessible from Julia - see issue https://github.com/znmeb/edgyR/issues/30. 5.4 R and RStudio from source edgyr-ml includes R 4.0.2 and RStudio Server 1.3.1056 compiled from source. The compressed log files from all builds are on the image in /home/edgyr/logfiles/. 5.5 The edgyr user Once the Linux layers are complete and RStudio Server is configured, the build process adds a non-root user edgyr with main group edgyr and sudo privileges. This is standard practice for servers built on Ubuntu Linux. 5.5.1 Reticulate / virtualenv / virtualenvwrapper edgyr-ml includes the R Python interface library reticulate.14 By default, reticulate uses virtualenv15 to manage Python virtual environments.edgyr-ml also includes virtualenvwrapper,16 a command line tool for managing Python virtual environments. 5.5.2 R packages The R packages included on the edgyr-ml image are aimed at the core mission of edgyr, providing an R development environment for the Jetson. Because the base image contains a Python machine learning stack, libraries for interfacing with it are also provided. caracas (symbolic mathematics - uses SymPy) data.table (fast data wrangling tool) devtools (package development) DiagrammeR (create and edit diagrams) DT (display tables) greta (probabilistic programming) igraph (graph theoretic computing) IRkernel (Jupyter R kernel) keras (interface to Keras / TensorFlow) knitr (R Markdown) miniUI (required by pkgdown rebuild addin, imports shiny as a bonus!) pkgdown (package site builder) rmarkdown (R Markdown) rTorch (interface to PyTorch) tidyverse (R data science stack) tinytex (LaTeX / PDF generation) Some notes about tinytex:17 it’s installed, and it works. The full TeXLive LaTeX on an Ubuntu distribution is something like 4 gigabytes, and the image is already almost 7 gigabytes, so this is a big deal. The tradeoff is that if you use a LaTeX package that isn’t already there, tinytex will pause and download it before continuing. This takes some time, but it only happens once. 5.6 References “Machine Learning for Jetson/L4t” (2019)↩︎ “L4t | NVIDIA Developer” (2020)↩︎ julia2020↩︎ ijulia2020↩︎ cudajl2020↩︎ Ushey, Allaire, and Tang (2020)↩︎ “Virtualenv” (2020)↩︎ “Virtualenvwrapper” (2020)↩︎ Xie (2019)↩︎ "],["operations-and-persistence.html", "Chapter 6 Operations and Persistence 6.1 Docker operations 6.2 Git and GitHub 6.3 Next: Using JupyterLab 6.4 References", " Chapter 6 Operations and Persistence 6.1 Docker operations The two main user-visible components to a Docker package are an image, which is a collection of software, and containers, where the software runs. In this release there is a single image, edgyr-ml, and normally you will only be running a single container, called edgyr. In the following, all operations will occur on the Docker host in the directory ~/Projects/edgyr/container-run-scripts. I’m going to assume the host is a Jetson Nano called “Nano.” 6.1.1 Pulling the image Before you can use the image, you have to have it on your Docker host. To do this, run the script pull-image: znmeb@Nano:~/Projects/edgyR/container-run-scripts$ ./pull-image latest: Pulling from znmeb/edgyr-ml 3b5e2c02f523: Pulling fs layer b9448035bb0a: Pulling fs layer [snip] 464529f5c5bb: Pull complete 248fad5e214b: Pull complete 6de52330cbb9: Pull complete Digest: sha256:51265581fe03aae8fb6a2cbc28929a56b33229cf5656d04723ad5c9e78a121d0 Status: Downloaded newer image for znmeb/edgyr-ml:latest docker.io/znmeb/edgyr-ml:latest REPOSITORY TAG IMAGE ID CREATED SIZE znmeb/edgyr-ml latest a74882eb113b 19 hours ago 6.84GB znmeb@Nano:~/Projects/edgyR/container-run-scripts$ 6.1.2 Running the image in a container Once we’ve pulled the image, we need to create a container with the image and start the service processes in it, in this case RStudio Server. We do this with the run-edgyr script: znmeb@Nano:~/Projects/edgyR/container-run-scripts$ export EDGYR_PASSWORD=&quot;12.angry%characters&quot; znmeb@Nano:~/Projects/edgyR/container-run-scripts$ ./run-edgyr Force-removing old &#39;edgyr&#39; container You can ignore errors if it doesn&#39;t exist Error: No such container: edgyr Running image znmeb/edgyr-ml:latest 867dcf8179966c9aa4472e8b0d71267106902a3da572b9ebb2e6bce5a3f2231d CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867dcf817996 znmeb/edgyr-ml:latest &quot;/docker-entrypoint.…&quot; 13 seconds ago Up 5 seconds edgyr Resetting &#39;edgyr&#39; password Starting RStudio Server - browse to port 7878 on Docker host znmeb@Nano:~/Projects/edgyR/container-run-scripts$ If you forget to define the EDGYR_PASSWORD variable, you’ll get an error message: znmeb@Nano:~/Projects/edgyR/container-run-scripts$ ./run-edgyr You need to specify a new password for the &#39;edgyr&#39; account in the &#39;EDGYR_PASSWORD&#39; environment variable. The new &#39;edgyr&#39; password must be at least 12 characters! A Docker container is a collection of Linux processes that are isolated from the host except for well-defined resource usages and behavior. When you did ./run-edgyr, the following things happened: If there was already an edgyr container, Docker removed it. Docker created a new container, called edgyr. Docker set the filesystem of the container to the contents of the image, docker.io/znmeb/edgyr-ml. This filesystem is independent of the host filesystem; it’s stored in a protected area that Docker manages. Docker connected the container’s network to the host network. This means any ports that the processes in the container uses are bound to the host port with the same numbers. For this image, that’s port 7878 for RStudio Server and port 8888 if you start up the JupyterLab service. Docker started the container by running a script in the container called docker-entrypoint.sh. docker-entrypoint.sh read the EDGYR_PASSWORD environment variable and set the password for the edgyr account in the container to that value. All of this means you can now browse to port 7878 on the host Nano remotely, or to port 7878 on localhost from the Nano console, and log in to RStudio Server as edgyr with the password you set. The host - container relationship is a bit like one-way mirrors. The processes in the container can only see other processes running in the container, can only read and write to filesystems we allow, which in this case is the filesystem we created from the image with ./run-edgyr. We haven’t restricted the container’s CPU, GPU or RAM usage, but we could have done so. And we have connected the container directly to the host network, but we could have created an isolated virtual network that only the container and other containers we specified could use. 6.1.3 Stopping and restarting the container Suppose we want to stop the container but keep all the files on its filesystem intact. First, we stop the R session in the container from the RStudio Server browser window: Press the red button at the top right of the window to stop the R session. You will see this: You need to do this before stopping the container. If you forget, you may lose data, and you may see this warning when you bring it back up: After you’ve stopped the session, you can stop the container. There’s a script for that - stop-edgyr: znmeb@Nano:~/Projects/edgyR/container-run-scripts$ ./stop-edgyr Stopping the &#39;edgyr&#39; container edgyr CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867dcf817996 znmeb/edgyr-ml:latest &quot;/docker-entrypoint.…&quot; 3 hours ago Exited (137) 5 seconds ago edgyr znmeb@Nano:~/Projects/edgyR/container-run-scripts$ Now if you try to log in from a browser you’ll get an error message: Once you’ve stopped the container, you can shut the host down or restart it and your files will be there when you start everything up again. To start the container back up again, we start the container, and there’s a script for that too - start-edgyr: znmeb@Nano:~/Projects/edgyR/container-run-scripts$ ./start-edgyr Starting the &#39;edgyr&#39; container edgyr CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867dcf817996 znmeb/edgyr-ml:latest &quot;/docker-entrypoint.…&quot; 3 hours ago Up 5 seconds edgyr znmeb@Nano:~/Projects/edgyR/container-run-scripts$ Note that there’s a difference between run-edgyr and start-edgyr. run-edgyr creates a fresh container, loads the image into it, sets up the networking and then starts the container. start-edgyr only starts a stopped container that already exists. 6.2 Git and GitHub The primary goal of the edgyR project is to provide an R / RStudio package development environment for Jetson development kits. As a result, I strongly encourage developers to use Git and GitHub for persistence and collaboration rather than other means. The Nano is especially a one-person machine; it only has 4 GB of RAM and a small filesystem by current standards. See (Wickham 2015) for more practical advice on R package development. The first time you run an edgyr container, edit /home/edgyr/Scripts/edit-me-then-run-4-git-config.bash. Enter your name and email address as they appear on your GitHub repositories, and change the credential caching time if two hours is too long or too short for your workflow. Then run the script. To clone a project, go into the Projects directory and use the https form to specify the repository. The first time you push a commit, RStudio will ask for your ID and “password.” If you’re using two-factor authentication as GitHub recommends, the password is your personal access token (PAT). Git will cache those credentials for the time you specified - two hours if you use the default in the script. 6.3 Next: Using JupyterLab vignette(\"kk-jupyter-lab\") 6.4 References "],["using-jupyterlab.html", "Chapter 7 Using JupyterLab 7.1 Starting JupyterLab 7.2 References", " Chapter 7 Using JupyterLab 7.1 Starting JupyterLab The edgyr-ml image inherits JupyterLab18 from the NVIDIA l4t-ml image.19 As a result, all that necessary to use JupyterLab is to add the Julia and R kernels a script to start up the service. The IJulia package20 provides the Julia kernel and the IRkernel package21 provides the R kernel. The startup script is /home/edgyr/Scripts/start-jupyter-lab. Browse to the RStudio Server either from the host console or remotely and open the ‘Terminal’ pane. Type Scripts/start-jupyter-lab. You’ll see If you’re on the Nano console, you just need to copy and paste the http link into a browser tab and you’ll be in the JupyterLab front page. If you’re connected remotely, copy the http://edgyr link, but replace edgyr with the IP address of your Docker host. For example, mine is 192.168.254.23: To stop the JupyterLab server, press Control-C twice as shown above. As with RStudio Server and R packages, I strongly recommend putting your notebooks in projects in the Projects directory and collaborating via Git / GitHub. 7.2 References “Getting Started with Jetson Nano Developer Kit.” 2019. https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit. “JetPack SDK.” 2019. https://developer.nvidia.com/embedded/jetpack. “Jetson Nano Developer Kit.” 2019. https://developer.nvidia.com/embedded/jetson-nano-developer-kit. “JetsonHacks.” 2020. https://www.jetsonhacks.com/. “JupyterLab Documentation.” 2020. https://jupyterlab.readthedocs.io/en/stable/. Kluyver, Thomas, Philipp Angerer, Jan Schulz, and Karthik Ram. 2019. IRkernel: Native r Kernel for the ’Jupyter Notebook’. https://CRAN.R-project.org/package=IRkernel. ———. 2019. IRkernel: Native r Kernel for the ’Jupyter Notebook’. https://CRAN.R-project.org/package=IRkernel. “L4t | NVIDIA Developer.” 2020. https://developer.nvidia.com/embedded/linux-tegra. Lovelace, R., J. Nowosad, and J. Muenchow. 2019. Geocomputation with r. Chapman &amp; Hall/CRC the r Series. CRC Press. https://books.google.com/books?id=0y6ODwAAQBAJ. “Machine Learning for Jetson/L4t.” 2019. https://ngc.nvidia.com/catalog/containers/nvidia:l4t-ml. McElreath, R. 2020. Statistical Rethinking: A Bayesian Course with Examples in r and STAN. Chapman &amp; Hall/CRC Texts in Statistical Science. CRC Press. https://books.google.com/books?id=FuLWDwAAQBAJ. Sueur, J. 2018. Sound Analysis and Synthesis with r. Use r! Springer International Publishing. https://books.google.com/books?id=yTR4swEACAAJ. “Tutorials | NVIDIA Developer.” 2019. https://developer.nvidia.com/embedded/learn/tutorials. Ushey, Kevin, JJ Allaire, and Yuan Tang. 2020. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. “Virtualenv.” 2020. https://virtualenv.pypa.io/en/latest/. “Virtualenvwrapper.” 2020. https://virtualenvwrapper.readthedocs.io/en/latest/index.html. Wickham, H. 2015. R Packages: Organize, Test, Document, and Share Your Code. O’Reilly Media. http://r-pkgs.had.co.nz/. Xie, Yihui. 2019. “TinyTeX: A Lightweight, Cross-Platform, and Easy-to-Maintain LaTeX Distribution Based on TeX Live.” TUGboat, no. 1: 30–32. http://tug.org/TUGboat/Contents/contents40-1.html. Zensius, Michael. 2019. “Jetson Nano Developer Kit.” https://developer.download.nvidia.com/assets/embedded/secure/jetson/Nano/docs/NVIDIA_Jetson_Nano_Developer_Kit_User_Guide.pdf?odrsCm4blhmjAnAUlewgrRJfPquCoBhX4ix54BxCkPIEyrzt-SU8OmtFCPBSjrLDRLUyS65DGMTW5e2TR7IlhE9coQE5bLvNjaud2zdntK3sr9I2DfhUopX5nsy3TRpZHSCV3woTFdKD6lrIPOguhk79mwmHLuB-Z_UBFNio6xxKC9_bHhhaPtd8uULODeiLqMorA9oy. “JupyterLab Documentation” (2020)↩︎ “Machine Learning for Jetson/L4t” (2019)↩︎ ijulia2020↩︎ Kluyver et al. (2019)↩︎ "]]
